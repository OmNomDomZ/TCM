import lingo/pegcode/driver;
import string;

Exp ::= Add, Sub, Mult, Num;

Add     (left: Exp, right: Exp);
Sub     (left: Exp, right: Exp);
Mult    (left: Exp, right: Exp);
Num     (num: int);

exp2s(exp: Exp)->string{
    switch(exp){
        Add         (l, r) :   "(" 	+ exp2s(l) + "+" + exp2s(r) + ")";
        Sub	        (l, r) :   "(" 	+ exp2s(l) + "-" + exp2s(r) + ")";
        Mult	    (l, r) :   "(" 	+ exp2s(l) + "*" + exp2s(r) + ")";
        Num         (num)  :    i2s(num);
    }
}

calculateAst(exp: Exp) -> int {
    switch (exp) {
        Add         (l, r) :    calculateAst(l) + calculateAst(r);
        Sub         (l, r) :    calculateAst(l) - calculateAst(r);
        Mult        (l, r) :    calculateAst(l) * calculateAst(r);
        Num         (num)  :    num;
    }
}

ast2rp(exp: Exp) -> string{
    switch (exp) {
        Add         (l, r) :    concatStrings([ast2rp(l), " ", ast2rp(r)," + "]);
        Sub         (l, r) :    concatStrings([ast2rp(l), " ", ast2rp(r)," - "]);
        Mult        (l, r) :    concatStrings([ast2rp(l)," ",ast2rp(r)," * "]);
        Num         (num)  :    concatStrings([i2s(num), " "]);
    }
}


calculateRp(rp : string) -> int{
    chars = strSplit2WithoutLeave(rp, [" "]);

    res = fold(chars, ref[],\stack,exp ->{
        if(isDigit(exp)){
            push(stack,s2i(exp));
        } else if(exp == "+"){
            a = pop(stack);
            b = pop(stack);
            c = a + b;
            push(stack,c);
        } else if (exp == "*"){
            a = pop(stack);
            b = pop(stack);
            c = a * b;
            push(stack, c) 
        } else if (exp == "-"){
            a = pop(stack);
            b = pop(stack);
            c = b - a;
            push(stack, c)
        } else {
            push(stack, s2i(exp))
        }

        stack;
    });

    pop(res);
}

pop(stack : ref [int]) -> int
{
   a = lastElement(^stack, 0);
   stack := subrange(^stack, 0, length(^stack) - 1); 
   a;
}

push(stack : ref[int], element : int) 
{
    refArrayPush(stack, element);
}

main(){
    ast = parsic(
        compilePegGrammar("#include lingo.lingo"),
        "(((22 * 2) + (3 * 8))   -   1 )",
        defaultPegActions
    );

    println("AST: ");
    println(ast);
    println("");
    println("Parsed AST: " + exp2s(ast));
    println("Result: " + i2s(calculateAst(ast)));


    rp = ast2rp(ast);
    println("AST to RP: " + rp);

    println("RP result: " + i2s(calculateRp(rp)));

    quit(0);
}